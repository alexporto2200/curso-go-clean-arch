package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"curso-go-clean-arch/graph/model"
	"curso-go-clean-arch/internal/usecase"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.NewOrder) (*model.Order, error) {
	// Convert GraphQL input to use case input
	createInput := usecase.CreateOrderInput{
		Description: input.Desc,
	}

	// Execute use case
	output, err := r.Resolver.container.CreateOrderUseCase.Execute(ctx, createInput)
	if err != nil {
		return nil, err
	}

	// Convert use case output to GraphQL model
	return &model.Order{
		ID:        output.ID,
		Desc:      output.Description,
		CreatedAt: output.CreatedAt,
		UpdatedAt: output.UpdatedAt,
	}, nil
}

// ListOrders is the resolver for the listOrders field.
func (r *queryResolver) ListOrders(ctx context.Context) ([]*model.Order, error) {
	// Execute use case
	output, err := r.Resolver.container.ListOrdersUseCase.Execute(ctx)
	if err != nil {
		return nil, err
	}

	// Convert use case output to GraphQL models
	var orders []*model.Order
	for _, order := range output {
		orders = append(orders, &model.Order{
			ID:        order.ID,
			Desc:      order.Description,
			CreatedAt: order.CreatedAt,
			UpdatedAt: order.UpdatedAt,
		})
	}

	return orders, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
