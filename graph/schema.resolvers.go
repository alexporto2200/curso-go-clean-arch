package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"curso-go-clean-arch/graph/model"
	"fmt"
	"time"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.NewOrder) (*model.Order, error) {
	r.Resolver.mu.Lock()
	defer r.Resolver.mu.Unlock()

	id := fmt.Sprintf("%d", time.Now().UnixNano())
	newOrder := &model.Order{
		ID:   id,
		Desc: input.Desc,
		Date: input.Date,
	}
	r.Resolver.orders = append(r.Resolver.orders, newOrder)
	return newOrder, nil
}

// ListOrders is the resolver for the listOrders field.
func (r *queryResolver) ListOrders(ctx context.Context) ([]*model.Order, error) {
	r.Resolver.mu.Lock()
	defer r.Resolver.mu.Unlock()
	return r.Resolver.orders, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
